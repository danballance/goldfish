name: CI

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Define permissions for the workflow
permissions:
  contents: read

jobs:
  # Test job - run Go tests with race detection and coverage
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'  # Use Go version from go.mod
        cache: true               # Enable built-in caching

    - name: Run tests
      run: |
        # Run tests with race detection and coverage
        go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Run go vet
      run: go vet ./...

    - name: Check go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  # Lint job - static analysis with golangci-lint
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        # cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1

  # Build job - cross-platform builds for development verification
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]  # Only run if tests and linting pass
    strategy:
      fail-fast: false  # Continue building other platforms if one fails
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0  # Build static binaries
      run: |
        # Determine binary name with platform-specific extension
        binary_name="goldfish"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        
        # Build with optimized flags for size reduction
        go build -ldflags="-s -w" -o "dist/${binary_name}_${{ matrix.goos }}_${{ matrix.goarch }}" ./cmd/goldfish
        
        # Create archive directory structure
        mkdir -p "dist/archive"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goldfish_${{ matrix.goos }}_${{ matrix.goarch }}
        path: dist/
        retention-days: 30